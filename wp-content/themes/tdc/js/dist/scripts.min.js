window.Modernizr=function(e,t,n){function r(e){y.cssText=e}function o(e,t){return typeof e===t}function i(e,t){return!!~(""+e).indexOf(t)}function a(e,t){for(var r in e){var o=e[r];if(!i(o,"-")&&y[o]!==n)return"pfx"==t?o:!0}return!1}function c(e,t,r){for(var i in e){var a=t[e[i]];if(a!==n)return r===!1?e[i]:o(a,"function")?a.bind(r||t):a}return!1}function s(e,t,n){var r=e.charAt(0).toUpperCase()+e.slice(1),i=(e+" "+C.join(r+" ")+r).split(" ");return o(t,"string")||o(t,"undefined")?a(i,t):(i=(e+" "+w.join(r+" ")+r).split(" "),c(i,t,n))}var u,l,f,d="2.8.3",m={},p=!0,h=t.documentElement,v="modernizr",g=t.createElement(v),y=g.style,b=({}.toString," -webkit- -moz- -o- -ms- ".split(" ")),E="Webkit Moz O ms",C=E.split(" "),w=E.toLowerCase().split(" "),x={svg:"http://www.w3.org/2000/svg"},S={},N=[],F=N.slice,M=function(e,n,r,o){var i,a,c,s,u=t.createElement("div"),l=t.body,f=l||t.createElement("body");if(parseInt(r,10))for(;r--;)c=t.createElement("div"),c.id=o?o[r]:v+(r+1),u.appendChild(c);return i=["&#173;",'<style id="s',v,'">',e,"</style>"].join(""),u.id=v,(l?u:f).innerHTML+=i,f.appendChild(u),l||(f.style.background="",f.style.overflow="hidden",s=h.style.overflow,h.style.overflow="hidden",h.appendChild(f)),a=n(u,e),l?u.parentNode.removeChild(u):(f.parentNode.removeChild(f),h.style.overflow=s),!!a},j=function(t){var n=e.matchMedia||e.msMatchMedia;if(n)return n(t)&&n(t).matches||!1;var r;return M("@media "+t+" { #"+v+" { position: absolute; } }",function(t){r="absolute"==(e.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position}),r},k=function(){function e(e,i){i=i||t.createElement(r[e]||"div"),e="on"+e;var a=e in i;return a||(i.setAttribute||(i=t.createElement("div")),i.setAttribute&&i.removeAttribute&&(i.setAttribute(e,""),a=o(i[e],"function"),o(i[e],"undefined")||(i[e]=n),i.removeAttribute(e))),i=null,a}var r={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return e}(),T={}.hasOwnProperty;f=o(T,"undefined")||o(T.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return T.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var n=F.call(arguments,1),r=function(){if(this instanceof r){var o=function(){};o.prototype=t.prototype;var i=new o,a=t.apply(i,n.concat(F.call(arguments)));return Object(a)===a?a:i}return t.apply(e,n.concat(F.call(arguments)))};return r}),S.flexbox=function(){return s("flexWrap")},S.flexboxlegacy=function(){return s("boxDirection")},S.touch=function(){var n;return"ontouchstart"in e||e.DocumentTouch&&t instanceof DocumentTouch?n=!0:M(["@media (",b.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(e){n=9===e.offsetTop}),n},S.multiplebgs=function(){return r("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(y.background)},S.cssanimations=function(){return s("animationName")},S.csscolumns=function(){return s("columnCount")},S.csstransforms=function(){return!!s("transform")},S.csstransforms3d=function(){var e=!!s("perspective");return e&&"webkitPerspective"in h.style&&M("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t,n){e=9===t.offsetLeft&&3===t.offsetHeight}),e},S.csstransitions=function(){return s("transition")},S.svg=function(){return!!t.createElementNS&&!!t.createElementNS(x.svg,"svg").createSVGRect},S.inlinesvg=function(){var e=t.createElement("div");return e.innerHTML="<svg/>",(e.firstChild&&e.firstChild.namespaceURI)==x.svg};for(var D in S)f(S,D)&&(l=D.toLowerCase(),m[l]=S[D](),N.push((m[l]?"":"no-")+l));return m.addTest=function(e,t){if("object"==typeof e)for(var r in e)f(e,r)&&m.addTest(r,e[r]);else{if(e=e.toLowerCase(),m[e]!==n)return m;t="function"==typeof t?t():t,"undefined"!=typeof p&&p&&(h.className+=" "+(t?"":"no-")+e),m[e]=t}return m},r(""),g=u=null,function(e,t){function n(e,t){var n=e.createElement("p"),r=e.getElementsByTagName("head")[0]||e.documentElement;return n.innerHTML="x<style>"+t+"</style>",r.insertBefore(n.lastChild,r.firstChild)}function r(){var e=y.elements;return"string"==typeof e?e.split(" "):e}function o(e){var t=g[e[h]];return t||(t={},v++,e[h]=v,g[v]=t),t}function i(e,n,r){if(n||(n=t),l)return n.createElement(e);r||(r=o(n));var i;return i=r.cache[e]?r.cache[e].cloneNode():p.test(e)?(r.cache[e]=r.createElem(e)).cloneNode():r.createElem(e),!i.canHaveChildren||m.test(e)||i.tagUrn?i:r.frag.appendChild(i)}function a(e,n){if(e||(e=t),l)return e.createDocumentFragment();n=n||o(e);for(var i=n.frag.cloneNode(),a=0,c=r(),s=c.length;s>a;a++)i.createElement(c[a]);return i}function c(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(n){return y.shivMethods?i(n,e,t):t.createElem(n)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+r().join().replace(/[\w\-]+/g,function(e){return t.createElem(e),t.frag.createElement(e),'c("'+e+'")'})+");return n}")(y,t.frag)}function s(e){e||(e=t);var r=o(e);return!y.shivCSS||u||r.hasCSS||(r.hasCSS=!!n(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),l||c(e,r),e}var u,l,f="3.7.0",d=e.html5||{},m=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,h="_html5shiv",v=0,g={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",u="hidden"in e,l=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return"undefined"==typeof e.cloneNode||"undefined"==typeof e.createDocumentFragment||"undefined"==typeof e.createElement}()}catch(n){u=!0,l=!0}}();var y={elements:d.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:f,shivCSS:d.shivCSS!==!1,supportsUnknownElements:l,shivMethods:d.shivMethods!==!1,type:"default",shivDocument:s,createElement:i,createDocumentFragment:a};e.html5=y,s(t)}(this,t),m._version=d,m._prefixes=b,m._domPrefixes=w,m._cssomPrefixes=C,m.mq=j,m.hasEvent=k,m.testProp=function(e){return a([e])},m.testAllProps=s,m.testStyles=M,m.prefixed=function(e,t,n){return t?s(e,t,n):s(e,"pfx")},h.className=h.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(p?" js "+N.join(" "):""),m}(this,this.document);
window.Modernizr&&(Modernizr.addTest("ipad",function(){return!!navigator.userAgent.match(/iPad/i)}),Modernizr.addTest("iphone",function(){return!!navigator.userAgent.match(/iPhone/i)}),Modernizr.addTest("ipod",function(){return!!navigator.userAgent.match(/iPod/i)}),Modernizr.addTest("appleios",function(){return Modernizr.ipad||Modernizr.ipod||Modernizr.iphone})),Date.now||(Date.now=function(){return(new Date).getTime()}),function(){"use strict";for(var n=["webkit","moz"],e=0;e<n.length&&!window.requestAnimationFrame;++e){var i=n[e];window.requestAnimationFrame=window[i+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i+"CancelAnimationFrame"]||window[i+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var t=0;window.requestAnimationFrame=function(n){var e=Date.now(),i=Math.max(t+16,e);return setTimeout(function(){n(t=i)},i-e)},window.cancelAnimationFrame=clearTimeout}}();
!function(t,n,i,e){function u(n,i){this.element=n,this.options=t.extend({},o,i),this._defaults=o,this._name=a,this.init()}var a="defaultPluginName",o={propertyName:"value"};u.prototype.init=function(){},t.fn[a]=function(n){return this.each(function(){t.data(this,"plugin_"+a)||t.data(this,"plugin_"+a,new u(this,n))})}}(jQuery,window,document);
!function(s,e,t,i){function n(e,t){this.element=e,this.options=s.extend({},o,t),this._defaults=o,this._name=a,this.has_events=!1,this.init(),this.initEvents()}var a="togglemenu",o={nav:".nav--main",subnav:".nav--sub",item:".nav__item",link:".nav__link",back:".nav__link--back",active:".is-active",inactive:".is-inactive",open:".is-open",reset_on_close:!0,reset_query:"screen and (min-width: 40em)"};n.prototype={init:function(){this.selectors={nav:("."+this.options.nav).replace("..","."),subnav:("."+this.options.subnav).replace("..","."),item:("."+this.options.item).replace("..","."),link:("."+this.options.link).replace("..","."),back:("."+this.options.back).replace("..","."),active:("."+this.options.active).replace("..","."),inactive:("."+this.options.inactive).replace("..","."),open:("."+this.options.open).replace("..",".")},this.classes={nav:this.options.nav.replace(/^\./g,""),subnav:this.options.subnav.replace(/^\./g,""),item:this.options.item.replace(/^\./g,""),link:this.options.link.replace(/^\./g,""),back:this.options.back.replace(/^\./g,""),active:this.options.active.replace(/^\./g,""),inactive:this.options.inactive.replace(/^\./g,""),open:this.options.open.replace(/^\./g,"")}},initEvents:function(){var t=this;this.has_events=!0,s(this.element).on("click",function(e){var i=s(t.selectors.nav).hasClass(t.classes.open);e.preventDefault(),t.toggleNav(i)}),s([this.selectors.nav+" "+this.selectors.link,this.selectors.nav+" "+this.selectors.back].join(",")).on("click",function(e){var i,n,a,o;i=s(this),a=i.hasClass(t.classes.back),n=a?i.parent(t.selectors.subnav):i.siblings(t.selectors.subnav),o=!!n.length&&!n.hasClass(t.classes.open),a?(e.preventDefault(),t.closeSubnav(n)):o&&(e.preventDefault(),t.openSubnav(i,n))}),"object"==typeof e.Modernizr&&"function"==typeof e.Modernizr.mq&&s(e).on("resize",function(){e.requestAnimationFrame(t.handleResize.bind(t))}).resize()},removeEvents:function(){this.has_events=!1,s(this.element).off("click"),s([this.selectors.nav+" "+this.selectors.link,this.selectors.nav+" "+this.selectors.back].join(",")).off("click")},toggleNav:function(e){var t=this;e&&!t.options.reset_on_close?(s(t.element).removeClass(t.classes.active),s(t.selectors.nav).removeClass(t.classes.open)):e&&t.options.reset_on_close?t.resetNav():(s(t.element).addClass(t.classes.active),s(t.selectors.nav).addClass(t.classes.open))},resetNav:function(){var e=this;s(e.element).removeClass(e.classes.active),s(e.selectors.nav).removeClass(e.classes.open).find([e.selectors.subnav,e.selectors.link,e.selectors.item,e.selectors.back].join()).removeClass([e.classes.active,e.classes.inactive,e.classes.open].join(" "))},openSubnav:function(s,e){var t=this;s.addClass(t.classes.active).closest(t.selectors.item).addClass(t.classes.active).siblings().addClass(t.classes.inactive),e.addClass(t.classes.open)},closeSubnav:function(s){var e=this;s.siblings().removeClass(e.classes.active),s.removeClass(e.classes.open).find([e.selectors.subnav,e.selectors.link,e.selectors.item,e.selectors.back].join()).removeClass([e.classes.active,e.classes.inactive,e.classes.open].join(" ")).end().closest(e.selectors.item).removeClass(e.classes.active).siblings().removeClass([e.classes.active,e.classes.inactive,e.classes.open].join(" "))},handleResize:function(){var t=this;s(e).width()!==t.window_width&&(t.window_width=s(e).width(),e.Modernizr.mq(t.options.reset_query)?(t.resetNav(),t.has_events&&t.removeEvents()):t.has_events||t.initEvents())}},s.fn[a]=function(e){return this.each(function(){s.data(this,"plugin_"+a)||s.data(this,"plugin_"+a,new n(this,e))})}}(jQuery,window,document);
!function(n,e,i,a){n(function(){n(".js-toggle-nav").togglemenu({nav:".nav--main",subnav:".nav--sub",item:".nav--item",link:".nav__link",back:".nav__link--back",active:".is-active",inactive:".is-active",open:".is-open",reset_on_close:!0,reset_query:"screen and (min-width: 40em)"})})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;base64,